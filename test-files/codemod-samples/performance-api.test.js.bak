/**
 * Sample Jest test file with Performance API usage
 */

import { processNodes } from '../../src/content/domScanner.js';

describe('Performance API Sample', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Clear existing performance entries
    performance.clearMarks();
    performance.clearMeasures();
    
    // Mock performance methods if needed
    if (typeof performance.mark !== 'function') {
      performance.mark = jest.fn();
    }
    if (typeof performance.measure !== 'function') {
      performance.measure = jest.fn();
    }
    if (typeof performance.getEntriesByName !== 'function') {
      performance.getEntriesByName = jest.fn().mockReturnValue([{
        duration: 10
      }]);
    }
  });

  test('measures performance of node processing', () => {
    // Create sample nodes
    const nodes = [
      document.createElement('div'),
      document.createElement('span'),
      document.createElement('p')
    ];
    
    // Set up performance spy
    const markSpy = jest.spyOn(performance, 'mark');
    const measureSpy = jest.spyOn(performance, 'measure');
    
    // Process the nodes
    processNodes(nodes);
    
    // Verify performance marks were created
    expect(markSpy).toHaveBeenCalledWith('processNodes-start');
    expect(markSpy).toHaveBeenCalledWith('processNodes-end');
    
    // Verify performance measure was created
    expect(measureSpy).toHaveBeenCalledWith(
      'processNodes', 
      'processNodes-start', 
      'processNodes-end'
    );
  });

  test('logs performance metrics for expensive operations', () => {
    // Set up mocks
    const getEntriesSpy = jest.spyOn(performance, 'getEntriesByName')
      .mockReturnValue([{ duration: 150 }]);
    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
    
    // Call function that uses performance API
    processBatchWithPerformanceLogging([1, 2, 3, 4, 5]);
    
    // Verify performance was measured
    expect(getEntriesSpy).toHaveBeenCalledWith('batch-processing');
    
    // Verify warning logged for slow operation
    expect(consoleSpy).toHaveBeenCalledWith(
      'Performance warning: batch processing took 150ms'
    );
  });
});

// Helper function for testing
function processBatchWithPerformanceLogging(items) {
  performance.mark('batch-start');
  
  // Simulate processing
  for (const item of items) {
    // Process item
  }
  
  performance.mark('batch-end');
  performance.measure('batch-processing', 'batch-start', 'batch-end');
  
  // Get the measure
  const measures = performance.getEntriesByName('batch-processing');
  const duration = measures[0].duration;
  
  // Log warning if slow
  if (duration > 100) {
    console.warn(`Performance warning: batch processing took ${duration}ms`);
  }
  
  return items.map(i => i * 2);
}